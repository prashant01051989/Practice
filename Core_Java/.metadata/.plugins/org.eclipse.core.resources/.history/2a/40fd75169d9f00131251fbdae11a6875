package com.thread.test;

public class NeedForSynchronizationDemo {

	public static void main(String[] args) {
		FinTrans ft = new FinTrans();
		TransThread tt1 = new TransThread(ft, "DepositeThread");
		TransThread tt2 = new TransThread(ft, "Withdrawal Thread");
		tt1.start();
		tt2.start();
		
	}

}

class FinTrans {
	public static String transName;
	public static double amount;
}

class TransThread extends Thread {
	private FinTrans ft;

	public TransThread(FinTrans ft, String name) {
		super(name);
		this.ft = ft;
	}

	public void run() {
		for (int i = 0; i < 100; i++) {
			if (getName().equals("DepositeThread")) {
				synchronized (ft) {
					ft.transName = "Deposite";
					
					try {
						Thread.sleep((int) Math.random() * 1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					ft.amount = 2000.0;
					System.out.println(ft.transName + "  " + ft.amount);
				}
				System.out.println(Thread.holdsLock(ft));
			} else {
				synchronized (ft) {
					ft.transName = "withdrawal";

					try {
						Thread.sleep((int) (Math.random() * 1000));
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					ft.amount = 250.0;
					System.out.println(ft.transName + " " + ft.amount);
				}
			}
		}
	}
}